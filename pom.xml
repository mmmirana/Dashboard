<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.1.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.mirama</groupId>
    <artifactId>dashboard</artifactId>
    <version>1.1</version>
    <name>dashboard</name>
    <description>Demo project for Spring Boot</description>

    <properties>
        <java.version>1.8</java.version>
        <docker.image.prefix>registry.cn-hangzhou.aliyuncs.com/docker_for_k8s</docker.image.prefix>
        <docker.image.version>1.0</docker.image.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- https://mvnrepository.com/artifact/cn.hutool/hutool-all -->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>5.0.6</version>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!--https://github.com/spotify/dockerfile-maven-->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>1.4.13</version>
                <!--放开这块注释，则运行mvn deploy命令就会打包镜像-->
                <executions>
                    <execution>
                        <id>default</id>
                        <goals>
                            <!--如果package时不想用docker打包,就注释掉这个goal-->
                            <!--<goal>build</goal>-->
                            <!--<goal>push</goal>-->
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!-- ######################## 推送到远程仓库的时候设置为true ######################## -->
                    <!-- 使用maven settings的配置开启docker认证，前提是在maven setting中配置私有仓库的服务信息 -->
                    <!-- &lt;!&ndash; 阿里云Docker私有仓库的配置 &ndash;&gt;-->
                    <!-- <server>-->
                    <!--     <id>registry.cn-hangzhou.aliyuncs.com</id>-->
                    <!--     <username>18166748035@163.com</username>-->
                    <!--     <password>wzf*******</password>-->
                    <!-- </server>-->
                    <useMavenSettingsForAuth>false</useMavenSettingsForAuth>
                    <!-- 如果docker是远程服务器，需指定环境变量DOCKER_HOST -->
                    <!--C:\WINDOWS\system32>echo %DOCKER_HOST%-->
                    <!--tcp://192.168.237.128:2375-->
                    <repository>${docker.image.prefix}/${project.artifactId}</repository>
                    <tag>${project.version}</tag>
                    <!-- 自定义参数 -->
                    <buildArgs>
                        <!-- app名称-->
                        <APP_NAME>${project.name}</APP_NAME>
                        <!-- maven打包好的jar包名称 -->
                        <APP_JAR_FILE>${project.build.finalName}.jar</APP_JAR_FILE>
                    </buildArgs>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <!-- 阿里云maven私有仓库 -->
    <!--https://my.rdc.aliyun.com/welcome-->
    <distributionManagement>
        <repository>
            <id>rdc-releases</id>
            <url>https://repo.rdc.aliyun.com/repository/111993-release-p3AVOZ/</url>
        </repository>
        <snapshotRepository>
            <id>rdc-snapshots</id>
            <url>https://repo.rdc.aliyun.com/repository/111993-snapshot-6VaOW4/</url>
        </snapshotRepository>
    </distributionManagement>

</project>
